// Code generated by "stringer -type=OperatorType,CombineOperatorType"; DO NOT EDIT.

package parser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Equals-2]
	_ = x[NotEquals-3]
	_ = x[Matches-4]
	_ = x[NotMatches-5]
	_ = x[Less-6]
	_ = x[Greater-7]
	_ = x[LessOrEqual-8]
	_ = x[GreaterOrEqual-9]
}

const _OperatorType_name = "EqualsNotEqualsMatchesNotMatchesLessGreaterLessOrEqualGreaterOrEqual"

var _OperatorType_index = [...]uint8{0, 6, 15, 22, 32, 36, 43, 54, 68}

func (i OperatorType) String() string {
	i -= 2
	if i < 0 || i >= OperatorType(len(_OperatorType_index)-1) {
		return "OperatorType(" + strconv.FormatInt(int64(i+2), 10) + ")"
	}
	return _OperatorType_name[_OperatorType_index[i]:_OperatorType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[And-0]
	_ = x[Or-1]
}

const _CombineOperatorType_name = "AndOr"

var _CombineOperatorType_index = [...]uint8{0, 3, 5}

func (i CombineOperatorType) String() string {
	if i < 0 || i >= CombineOperatorType(len(_CombineOperatorType_index)-1) {
		return "CombineOperatorType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CombineOperatorType_name[_CombineOperatorType_index[i]:_CombineOperatorType_index[i+1]]
}
